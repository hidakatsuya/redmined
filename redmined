#!/bin/sh

set -euC

# Container name for redmined. If not set, use "redmined-container" as default.
CONTAINER_NAME=${REDMINED_CONTAINER_NAME:-"redmined-container"}

# Whether to map the UID and GID of the host user to the container user. If not set, do not map.
MAP_HOST_USER_TO_CONTAINER_USER=${REDMINED_MAP_HOST_USER_TO_CONTAINER_USER:-""}

# Volume name for bundler cache. If not set, use "redmine-bundle-cache" as default.
BUNDLE_CACHE_VOLUME=${REDMINED_BUNDLE_CACHE_VOLUME:-"redmine-bundle-cache"}

# Docker image for redmined. If not set, use "ghcr.io/hidakatsuya/redmined" as default.
IMAGE=${REDMINED_IMAGE:-"ghcr.io/hidakatsuya/redmined"}

# Port number for Redmine. If not set, use "3000" as default.
REDMINE_PORT=${REDMINED_REDMINE_PORT:-"3000"}

# Port number for publishing container port to host. If not set, use "$REDMINE_PORT:$REDMINE_PORT" as default.
PUBLISH_PORT=${REDMINED_PUBLISH_PORT:-""}

# Environment variables passed to the container. Multiple variables should be separated by space. If not set, use "" as default.
CONTAINER_ENVS=${REDMINED_CONTAINER_ENVS:-""}

# Configuration file for redmined
CONFIG_FILE=${REDMINED_CONFIG_FILE:-".redmined.json"}


# This must be the same as the user name in the Dockerfile
readonly CONTAINER_USER="developer"

exit_with_usage() {
    cat <<EOS 1>&2
Usage: redmined [options] [command]

Command:
  Commands to run in the container

Options:
  -n NAME  Specify the configuration name to load from the configuration file

Examples:
  redmined bundle install
  redmined bash
  redmined bin/rails server
EOS
    exit 0
}

docker_run() {
    local user_option=""

    if [ -n "$MAP_HOST_USER_TO_CONTAINER_USER" ]; then
        user_option="-e USER_ID=$(id -u) -e GROUP_ID=$(id -g)"
    fi

    docker run --name $CONTAINER_NAME --rm -it \
        $user_option \
        -v ${PWD}:/redmine \
        -v $BUNDLE_CACHE_VOLUME:/bundle \
        -p ${PUBLISH_PORT:-"$REDMINE_PORT:$REDMINE_PORT"} \
        -e PORT=$REDMINE_PORT \
        $IMAGE "$@"
}

docker_exec() {
    local user_option=""

    if [ -n "$MAP_HOST_USER_TO_CONTAINER_USER" ]; then
        user_option="--user $(id -u):$(id -g)"
    else
        user_option="--user $CONTAINER_USER"
    fi

    docker exec -it $user_option $CONTAINER_NAME "$@"
}

container_running() {
    docker ps -q --filter name=$CONTAINER_NAME
}

cd_redmine_root() {
    current_dir=$(pwd)

    while [ ! -f "Rakefile" ]; do
        cd ..
        if [ "$(pwd)" = "$current_dir" ]; then
            echo "No Redmine root directory found"
            exit 1
        fi
        current_dir=$(pwd)
    done
}

load_config() {
    target="${1:-"default"}"

    if [ ! -e $CONFIG_FILE ]; then
        return 0
    fi

    if ! command -v jq > /dev/null; then
        echo "[WARNING] Skipped loading configuration file because jq is not installed. Please install jq."
        return 0
    fi

    local name=$(jq -r --arg t $target '.[$t].name // ""' $CONFIG_FILE)
    if [ -n "$name" ]; then
        CONTAINER_NAME="redmined-container-$name"
        BUNDLE_CACHE_VOLUME="redmined-bundle-cache-$name"
    fi

    local ruby=$(jq -r --arg t $target '.[$t].ruby // ""' $CONFIG_FILE)
    if [ -n "$ruby" ]; then
        IMAGE="$IMAGE:ruby$ruby"
    fi

    local env=$(jq -r --arg t $target '.[$t].env // {} | to_entries | map("\(.key)=\(.value)") | join(" ")' $CONFIG_FILE)
    if [ -n "$env" ]; then
        CONTAINER_ENVS="$env"
    fi

    local port=$(jq -r --arg t $target '.[$t].port // ""' $CONFIG_FILE)
    if [ -n "$port" ]; then
        REDMINE_PORT="$port"
    fi
}

main() {
    if [ "$#" -eq 0 ]; then
        exit_with_usage
    fi

    (
        cd_redmine_root

        local config_name=""
        while getopts ":n:" opt; do
            case $opt in
                n)    config_name=$OPTARG;;
                \?|:) exit_with_usage;;
            esac
        done
        # Remove options from arguments
        shift $((OPTIND - 1))

        load_config $config_name

        local envs=""
        if [ -n "$CONTAINER_ENVS" ]; then
            envs="env $CONTAINER_ENVS "
        fi

        if [ ! $(container_running) ]; then
            docker_run $envs "$@"
        else
            docker_exec $envs "$@"
        fi
    )
}

main "$@"
